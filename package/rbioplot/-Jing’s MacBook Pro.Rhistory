cNm<-colnames(rawData)
require(multcomp) # found a way to take this line out of the function
# below: nchar() counts the number of the characters: note the diference between length(),
# which counts "how many" the *whole* character strings.
# ALSO, to use substr(), the object has to have "no quote" - use the function noquote() to achieve.
sink(file=paste(substr(noquote(fileName),1,nchar(fileName)-4),".stats.txt",sep=""),append=FALSE) # start the dump.
# below: Shapiro-Wilk normality test. p>0.5 means the data is normal.
print(sapply(cNm[-1],
function(i)tapply(rawData[[i]],rawData[1],function(x)shapiro.test(x)),
simplify = FALSE))
# below: stats
print(sapply(cNm[-1], function(x){
fml<-paste(x,cNm[1],sep="~")
Mdl<-aov(formula(fml),data = rawData) # fit an analysis of variance model by a call to lm(), applicable for both balanced or unbalanced data set.
# below: make sure to chain if else in this way!
if (Tp=="t-test"){
if (nlevels(rawData[[1]])==2){
Control<-subset(rawData[x],rawData[[1]] == levels(rawData[[1]])[1])
Experimental<-subset(rawData[x],rawData[[1]] == levels(rawData[[1]])[2])
Eqv<-bartlett.test(formula(fml),data = rawData) # Bartlett equal variance test. p>0.5 means the variance between groups is equal.
tTest<-t.test(Control, Experimental, var.equal = TRUE ,na.rm = TRUE)
statsLst<-list(EqualVariance = Eqv, ttest = tTest)
} else {"T-TEST CAN ONLY BE DONE FOR A TWO-GROUP COMPARISON (hint: try ANOVA/Tukey/Dunnett)."}
} else if (Tp =="ANOVA"){
if (nlevels(rawData[[1]])>2){
Eqv<-bartlett.test(formula(fml),data = rawData)
statsLst<-list(EqualVariance = Eqv, ANOVA = anova(Mdl))
statsLst
} else {"USE T-TEST FOR A TWO-GROUP COMPARISON"}
} else if (Tp =="Tukey"){
if (nlevels(rawData[[1]])>2){
Eqv<-bartlett.test(formula(fml),data = rawData)
statsLst<-list(EqualVariance = Eqv, ANOVA = anova(Mdl), Tukey = TukeyHSD(Mdl))
statsLst
} else {"USE T-TEST FOR A TWO-GROUP COMPARISON"}
} else if (Tp =="Dunnett"){
if (nlevels(rawData[[1]])>2){
Eqv<-bartlett.test(formula(fml),data = rawData)
var<-cNm[1]
arg<-list("Dunnett")
names(arg)<-var
mcp<-do.call(mcp, arg)
statsLst<-list(EqualVariance = Eqv, ANOVA = anova(Mdl), Dunnett = summary(glht(Mdl, linfct = mcp)))
statsLst
} else {"USE T-TEST FOR A TWO-GROUP COMPARISON"}
} else {
"ERROR: CHECK YOUR SPELLING (Hint: EveRyThinG iS cASe-sEnSiTiVE)."
} # but the function will still dump the result of the normality test.
},  simplify = FALSE)
)
sink() # end the dump
}
allStats("phthalate.csv","Tukey")
allStats("phthalate.csv","Tukey")
allStats("phthalate.csv","Tukey")
allStats("phthalate.csv","Tukey")
allStats("phthalate.csv","Tukey")
allStats("phthalate.csv","Tukey")
require(RBioplot)
rbiostats()
rbiostats("phthalate.csv","Tukey")
setwd("~/Desktop/test")
devtools::document()
library(RBioplot)
devtools::document()
library(RBioplot)
require(RBioplot)
?rbioplot
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot") # package directory
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
rbioplot("data.csv","Tukey")
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot") # package directory
devtools::document()
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
xTickLblSize = 12)
rbioplot("data.csv","Tukey", xTickLblSize = 12)
rbioplot("data.csv","Tukey", xTickLblSize = 15)
rbioplot("data.csv","Tukey", xTickLblSize = 15, yTickLblSize = 12)
rbioplot("data.csv","Tukey", xTickLblSize = 15, yTickLblSize = 15)
rbioplot("data.csv","Tukey", xTickLblSize = 15, yTickLblSize = 20)
rbioplot("data.csv","Tukey", xTickLblSize = 15, yTickLblSize = 12)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot") # package directory
devtools::document()
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
autorange_curve("data6.csv", x_nMajorTicks = 4)
rbioplot_curve("data6.csv", legendTtl = TRUE,
xLabel = "",
x_custom_tick_range = TRUE, x_upper_limit = 32,
x_major_tick_range = 8, x_n_minor_ticks = 0,
y_custom_tick_range = TRUE, y_upper_limit = 45,
y_major_tick_range = 4.5, y_n_minor_ticks = 4)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
devtools::document()
library(RBioplot)
devtools::document()
library(RBioplot)
SD <- sapply(colnames(rawData)[-1],
function(i) tapply(rawData[[i]], rawData[1],
function(j)sd(j, na.rm = TRUE)))
devtools::document()
library(RBioplot)
devtools::document()
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
rbioplot("data.csv","Tukey", xTickLblSize = 15, yTickLblSize = 12)
rbioplot("data.csv","Tukey", errorbar = "SD" , xTickLblSize = 15, yTickLblSize = 12)
SD
rbioplot("data.csv","Tukey", errorbar = "SEM" , xTickLblSize = 15, yTickLblSize = 12)
rbioplot("data.csv","Tukey", errorbar = "SD" , xTickLblSize = 15, yTickLblSize = 12)
allPlots<-function(fileName, Tp="Tukey", errorbar = "SEM",
Title = NULL, xAngle = 0, xAlign = 0.5, xLabel = NULL, yLabel = NULL,
legendTtl = FALSE, plotWidth = 170, plotHeight = 150,
y_custom_tick_range=FALSE, y_lower_limit = 0, y_upper_limit, y_major_tick_range, y_n_minor_ticks=4){
require(ggplot2)
require(reshape2)
require(multcompView) # for Tukey significant labels
require(multcomp) # for Dunnett test
require(gtable) # for duplicating y axis on the right side
require(grid) # for duplicating y axis on the right side
## load file
rawData<-read.csv(file=fileName,header=TRUE, na.strings = "NA",stringsAsFactors = FALSE)
rawData[[1]]<-factor(rawData[[1]],levels=c(unique(rawData[[1]]))) # avoid R's automatic re-ordering the factors automatically - it will keep the "typed-in" order
## normalize everything to control as 1
Mean<-sapply(colnames(rawData)[-1],
function(i) tapply(rawData[[i]], rawData[1], mean, na.rm=TRUE))
Mean<-data.frame(Mean)
Mean$Condition<-factor(rownames(Mean),levels=c(rownames(Mean)))
MeanNrm<-data.frame(sapply(colnames(Mean)[-length(colnames(Mean))],
function(i)sapply(Mean[[i]],function(j)j/Mean[[i]][1])),
Condition = factor(rownames(Mean),levels=c(rownames(Mean)))) # keep the correct factor level order with levels=c().
if (errorbar == "SEM"){
SEM <- sapply(colnames(rawData)[-1],
function(i) tapply(rawData[[i]], rawData[1],
function(j)sd(j, na.rm = TRUE)/sqrt(length(!is.na(j)))))
SEM <- data.frame(SEM)
SEM$Condition <- factor(rownames(SEM), levels = c(rownames(SEM)))
SEMNrm <- data.frame(sapply(colnames(SEM)[-length(colnames(SEM))],
function(i)sapply(SEM[[i]], function(j)j/Mean[[i]][1])),
Condition = factor(rownames(SEM), levels = c(rownames(SEM))))
colnames(SEMNrm)[-length(colnames(SEMNrm))] <- sapply(colnames(rawData)[-1],
function(x)paste(x, "SEM", sep=""))
} else if (errorbar == "SD"){
SD <- sapply(colnames(rawData)[-1],
function(i) tapply(rawData[[i]], rawData[1],
function(j)sd(j, na.rm = TRUE)))
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
SDNrm <- data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]], function(j)j/Mean[[i]][1])),
Condition = factor(rownames(SD), levels = c(rownames(SD))))
colnames(SDNrm)[-length(colnames(SDNrm))] <- sapply(colnames(rawData)[-1],
function(x)paste(x, "SD", sep=""))
} else {stop("Please specify the error bar type, SEM or SD")}
## for automatic significant labels (Tukey: letters; t-test & Dunnett: asterisks)
# below: a function swtiches the order around the "-" symbol of a character string: from "a-b" to "b-a".
revSort<-function(x){
uLst<-unlist(strsplit(x, "-"))
uLst<-uLst[c(2,1)]
uLst<-paste(uLst,collapse = "-") # collapse pastes things and puts them into ONE string object.
uLst
}
cNm<-colnames(rawData)
Tt<-sapply(colnames(rawData)[-1],
function(i) {
fml<-paste(i,cNm[1],sep="~")
Mdl<-aov(formula(fml),data=rawData)
# below: make sure to chain if else in this way.
if (Tp=="t-test"){
if (nlevels(rawData[[1]])==2){
Control<-subset(rawData[i],rawData[[1]] == levels(rawData[[1]])[1])
Experimental<-subset(rawData[i],rawData[[1]] == levels(rawData[[1]])[2])
Ttest<-t.test(Control, Experimental, var.equal = TRUE, na.rm = TRUE)
Ttestp<-Ttest$p.value
Lvl<- data.frame(Condition = unique(rawData[[1]]), pvalue = c(1,Ttestp))
Lvl$Lbl<-sapply(Lvl$pvalue,function(x)ifelse(x<0.05,"*",""))
Lvl<-Lvl[,c(1,3)]
} else {stop("T-TEST CAN ONLY BE DONE FOR A TWO-GROUP COMPARISON (hint: try ANOVA/Tukey/Dunnett).")}
} else if (Tp=="Tukey"){
if (nlevels(rawData[[1]])>2){
Sts<-TukeyHSD(Mdl)
Tkp<-Sts[[1]][,4]
names(Tkp)<-sapply(names(Tkp),function(j)revSort(j)) # change orders (from b-a to a-b)
Tkp<-multcompLetters(Tkp)["Letters"] # from the multcompView package.
Lbl<-names(Tkp[["Letters"]])
Lvl<-data.frame(Lbl, Tkp[["Letters"]],
stringsAsFactors = FALSE)
} else {stop("USE T-TEST FOR A TWO-GROUP COMPARISON")}
} else if (Tp=="Dunnett"){
if (nlevels(rawData[[1]])>2){
var <- cNm[1]
arg<- list("Dunnett")
names(arg)<-var
mcp<- do.call(mcp, arg)
Sts<-summary(glht(Mdl, linfct=mcp))
Dnt<-Sts$test$pvalues
names(Dnt)<-names(Sts$test$coefficients)
Lvl<- data.frame(Condition=unique(rawData[[1]]),pvalue=c(1,Dnt))
Lvl$Lbl<-sapply(Lvl$pvalue,function(x)ifelse(x<0.05,"*",""))
Lvl<-Lvl[,c(1,3)]
} else {stop("USE T-TEST FOR A TWO-GROUP COMPARISON")}
} else {
stop("ERROR: CHECK YOUR SPELLING (Hint: EveRyThinG iS cASe-sEnSiTiVE).")
}
colnames(Lvl)<-c(colnames(rawData)[1],i)
Lvl
},simplify = FALSE)
cTt <- Reduce(function(x, y) merge(x, y, all=T,
by=colnames(rawData)[1],sort=FALSE),
Tt, accumulate=FALSE) # Reduce() higher level funtion to contain other fucntions in functional programming
colnames(cTt)[-1]<-sapply(colnames(rawData)[-1],
function(x)paste(x,"Lbl",sep=""))
## generate the master dataframe for plotting
MeanNrmMLT <- melt(MeanNrm,id.vars=colnames(MeanNrm)[length(colnames(MeanNrm))]) # melt mean
MeanNrmMLT$id <- rownames(MeanNrmMLT)
cTtMLT <- melt(cTt,id.vars = colnames(cTt)[1]) # melt labels
cTtMLT$id <- rownames(cTtMLT)
cTtMLT[1] <- as.factor(cTtMLT[[1]])
colnames(MeanNrmMLT)[3] <- "NrmMean" # give unique variable names
colnames(cTtMLT)[1:3] <- c(colnames(MeanNrmMLT)[1], "variableLbl", "Lbl")
if (errorbar == "SEM"){
SEMNrmMLT <- melt(SEMNrm,id.vars = colnames(SEMNrm)[length(colnames(SEMNrm))]) # melt SEM
SEMNrmMLT$id <- rownames(SEMNrmMLT)
colnames(SEMNrmMLT)[2:3] <- c("variableSEM", "NrmSEM") # give unique variable names
DfPlt <- merge(MeanNrmMLT, SEMNrmMLT, by = c("id", "Condition"), sort = FALSE)
DfPlt <- merge(DfPlt, cTtMLT, by = c("id", "Condition"), sort = FALSE)
} else if (errorbar == "SD"){
SDNrmMLT <- melt(SDNrm,id.vars = colnames(SDNrm)[length(colnames(SDNrm))]) # melt SD
SDNrmMLT$id <- rownames(SDNrmMLT)
colnames(SDNrmMLT)[2:3] <- c("variableSD", "NrmSD") # give unique variable names
DfPlt <- merge(MeanNrmMLT, SDNrmMLT, by = c("id", "Condition"), sort = FALSE)
DfPlt <- merge(DfPlt, cTtMLT, by = c("id", "Condition"), sort = FALSE)
} else {stop("Please specify the error bar type, SEM or SD")}
# dump all data into a file
write.csv(DfPlt,file=paste(substr(noquote(fileName),1,nchar(fileName)-4),".plot.csv",sep=""),
quote=FALSE,na="NA",row.names = FALSE)
## plotting
# below: a function that allows to insert minor ticks
insert_minor <- function(major_labs, n_minor) {
labs <- c( sapply( major_labs, function(x) c(x, rep("", n_minor) ) ) )
labs[1:(length(labs)-n_minor)]
}
if (y_custom_tick_range == TRUE){ # custome y range and tick settings
y_axis_Mx<-y_upper_limit
y_axis_Mn<-y_lower_limit
major_tick_range<-y_major_tick_range # determined from the optrange_y() function - major_tick_range
n_minor_ticks<-y_n_minor_ticks # chosen from the optrange_y() function - minor_tick_options
} else {
y_axis_Mx<-with(DfPlt,ceiling((max(NrmMean+NrmSEM)+0.09)/0.5)*0.5) # the default y axis upper limit=max(mean+SEM+label+extra)
y_axis_Mn<-0
major_tick_range<-0.5 # default
n_minor_ticks<-4 # default
}
loclEnv <- environment()
baseplt <- ggplot(data = DfPlt, aes(x = variable, y = NrmMean, fill = Condition),
environment = loclEnv) +
geom_bar(position = "dodge", stat = "identity", color = "black")+
geom_errorbar(aes(ymin = NrmMean - NrmSEM, ymax = NrmMean + NrmSEM), width = 0.2,
position = position_dodge(0.9))+
scale_y_continuous(expand = c(0, 0),
breaks = seq(y_axis_Mn, y_axis_Mx, by = major_tick_range/(n_minor_ticks + 1)),  # based on "n_minor_ticks = major_tick_range/minor_tick_range - 1"
labels = insert_minor(seq(y_axis_Mn, y_axis_Mx, by = major_tick_range), n_minor_ticks),
limits = c(y_axis_Mn,y_axis_Mx))+
ggtitle(Title)+
xlab(xLabel)+
ylab(yLabel)+
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
legend.position = "bottom",
axis.text.x = element_text(size = 10, angle = xAngle, hjust = xAlign),
axis.text.y = element_text(size = 10, hjust = 0.5))+
scale_fill_grey(start = 0, name = cNm[1]) # set the colour as gray scale and legend tile as the name of the first column in the raw data.
if (Tp=="Tukey"){
pltLbl<-baseplt+
geom_text(aes(y = NrmMean + NrmSEM + 0.07, label = Lbl), position = position_dodge(width=0.9),
color="black") # the labels are placed 0.07 (tested optimal for letters) unit higher than the mean+SEM.
} else {
pltLbl<-baseplt+
geom_text(aes(y = NrmMean + NrmSEM + 0.06, label = Lbl), position = position_dodge(width=0.9),
size=6, color="black") # font size 6 and 0.06 unit higher is good for asterisks.
}
if (legendTtl == FALSE){
pltLbl<-pltLbl + theme(legend.title = element_blank())
} else {
pltLbl<-pltLbl + theme(legend.title = element_text(size = 8))
}
if (nlevels(DfPlt$variable) == 1){ # nlevels() outputs the number of the factor levels
plt<-pltLbl+
theme(axis.text.x = element_blank())+
coord_equal(ratio = 0.5)+
scale_x_discrete(expand = c(0.1, 0.1)) # space between y axis and fist/last bar
} else {
plt<-pltLbl
}
## add the right-side y axis
grid.newpage()
# extract gtable
pltgtb <- ggplot_gtable(ggplot_build(plt))
# add the right side y axis
Aa <- which(pltgtb$layout$name == "axis-l")
pltgtb_a <- pltgtb$grobs[[Aa]]
axs <- pltgtb_a$children[[2]]
axs$widths <- rev(axs$widths)
axs$grobs <- rev(axs$grobs)
axs$grobs[[1]]$x <- axs$grobs[[1]]$x - unit(1, "npc") + unit(0.08, "cm")
Ap <- c(subset(pltgtb$layout, name == "panel", select = t:r))
pltgtb <- gtable_add_cols(pltgtb, pltgtb$widths[pltgtb$layout[Aa, ]$l], length(pltgtb$widths) - 1)
pltgtb <- gtable_add_grob(pltgtb, axs, Ap$t, length(pltgtb$widths) - 1, Ap$b)
# export the file and draw a preview
ggsave(filename=paste(substr(noquote(fileName),1,nchar(fileName)-4),".plot.pdf",sep=""),plot=pltgtb,
width = plotWidth, height = plotHeight, units = "mm",dpi=600)
grid.draw(pltgtb) # preview
}
allPlots("data.csv","Tukey", xTickLblSize = 15, yTickLblSize = 12)
allPlots("data.csv","Tukey")
allPlots("data.csv","Tukey", errorbar = "SD")
tstData<-read.csv(file="data.csv",header=TRUE, na.strings = "NA", stringsAsFactors = FALSE)
tstData[[1]]<-factor(tstData[[1]],levels=c(unique(tstData[[1]])))
cNm<-colnames(tstData)
fml<-paste(colnames(tstData)[4],colnames(tstData)[1],sep="~") # tstData
eqlvar<-bartlett.test(formula(fml),data=tstData)
tstAov<-aov(formula(fml), data=tstData)
tstAnva<-anova(tstAovP1)
tstAnvaUql<-oneway.test(formula(fml), data = tstData)
tstTukey<-TukeyHSD(tstAnvaUql)
tLst<-list(ANOVA=anova(tstAovP1), Tukey=TukeyHSD(tstAovP1))
?bartlett.test
bartlett.test(formula(fml), data = tstData)
head(tstData)
require(ggplot2)
require(reshape2)
require(multcompView)
tstMean<-sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1], mean, na.rm=TRUE))
tstMean<-data.frame(tstMean)
tstMean$Condition<-factor(rownames(tstMean),levels=c(rownames(tstMean)))
length(colnames(tstMean))
tstMeanNrm<-data.frame(sapply(colnames(tstMean)[-length(colnames(tstMean))],
function(i)sapply(tstMean[[i]],function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(tstMean),levels=c(rownames(tstMean))))
tstSEM<-sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j,na.rm=TRUE)/sqrt(length(!is.na(j)))))
tstSEM<-data.frame(tstSEM)
tstSEM$Condition<-factor(rownames(tstSEM),levels=c(rownames(tstSEM)))
tstSEMNrm<-data.frame(sapply(colnames(tstSEM)[-length(colnames(tstSEM))],
function(i)sapply(tstSEM[[i]],function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(tstSEM),levels=c(rownames(tstSEM))))
colnames(tstSEMNrm)[-length(colnames(tstSEM))]<-sapply(colnames(tstData)[-1],
function(x)paste(x,"SEM",sep=""))
SD <- sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j, na.rm = TRUE)))
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
rownames(SD)
SD <- sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j, na.rm = TRUE)))
SD
rownames(SD)
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
c(rownames(SD))
rownames(SD)
SD <- sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j, na.rm = TRUE)))
rownames(SD)
c(rownames(SD))
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
class(tstMean)
class(SD)
SD <- sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j, na.rm = TRUE)))
class(SD)
tstMean
tstMean<-sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1], mean, na.rm=TRUE))
class(tstMean)
SD <- sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j, na.rm = TRUE)))
SD <- data.frame(SD)
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
SDNrm <- data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]], function(j)j/Mean[[i]][1])),
Condition = factor(rownames(SD), levels = c(rownames(SD))))
colnames(SDNrm)[-length(colnames(SDNrm))] <- sapply(colnames(rawData)[-1],
SD <- data.frame(SD)
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
SDNrm <- data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]], function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(SD), levels = c(rownames(SD))))
SDNrm <- data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]], function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(SD), levels = c(rownames(SD))))
SD <- sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j, na.rm = TRUE)))
SD <- data.frame(SD)
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
SDNrm <- data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]], function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(SD), levels = c(rownames(SD))))
ength(colnames(SD))
length(colnames(SD))
length(colnames(tstSEM))
SD
tstMean
tstMean$Condition<-factor(rownames(tstMean),levels=c(rownames(tstMean)))
tstMean<-sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1], mean, na.rm=TRUE))
tstMean<-data.frame(tstMean)
tstMean$Condition<-factor(rownames(tstMean),levels=c(rownames(tstMean)))
SDNrm
SD
tstMean
tstSEM<
tstSEM
SD
tstSEMNrm<-data.frame(sapply(colnames(tstSEM)[-length(colnames(tstSEM))],
function(i)sapply(tstSEM[[i]],function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(tstSEM),levels=c(rownames(tstSEM))))
data.frame(sapply(colnames(tstSEM)[-length(colnames(tstSEM))],
function(i)sapply(tstSEM[[i]],function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(tstSEM),levels=c(rownames(tstSEM))))
tstMean
data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]],function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(SD),levels=c(rownames(SD))))
data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]], function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(SD), levels = c(rownames(SD))))
SD <- sapply(colnames(tstData)[-1],
function(i) tapply(tstData[[i]], tstData[1],
function(j)sd(j, na.rm = TRUE)))
SD <- data.frame(SD)
SD$Condition <- factor(rownames(SD), levels = c(rownames(SD)))
SDNrm<-data.frame(sapply(colnames(SD)[-length(colnames(SD))],
function(i)sapply(SD[[i]],function(j)j/tstMean[[i]][1])),
Condition = factor(rownames(SD),levels=c(rownames(SD))))
colnames(SDNrm)[-length(colnames(SDNrm))] <- sapply(colnames(rawData)[-1],
function(x)paste(x, "SD", sep=""))
colnames(SDNrm)[-length(colnames(SDNrm))] <- sapply(colnames(tstData)[-1],
function(x)paste(x, "SD", sep=""))
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot") # package directory
devtools::document()
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
rbioplot("data.csv","Tukey", errorbar = "SD", xTickLblSize = 15, yTickLblSize = 12)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot") # package directory
devtools::document()
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
rbioplot("data.csv","Tukey", errorbar = "SD", xTickLblSize = 15, yTickLblSize = 12)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot") # package directory
devtools::document()
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
library(RBioplot)
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
rbioplot("data.csv","Tukey", errorbar = "SD", xTickLblSize = 15, yTickLblSize = 12)
rbioplot("data.csv","Tukey", errorbar = "SEM", xTickLblSize = 15, yTickLblSize = 12)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot")
devtools::document()
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
rbioplot_curve("data6.csv", legendTtl = TRUE,
xLabel = "",
x_custom_tick_range = TRUE, x_upper_limit = 32,
x_major_tick_range = 8, x_n_minor_ticks = 0,
y_custom_tick_range = TRUE, y_upper_limit = 45,
y_major_tick_range = 4.5, y_n_minor_ticks = 4)
rbioplot_curve("data6.csv", errorbar = "SD",
legendTtl = TRUE,
xLabel = "",
x_custom_tick_range = TRUE, x_upper_limit = 32,
x_major_tick_range = 8, x_n_minor_ticks = 0,
y_custom_tick_range = TRUE, y_upper_limit = 45,
y_major_tick_range = 4.5, y_n_minor_ticks = 4)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot")
devtools::document()
library(RBioplot)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
autorange_curve("data6.csv", x_nMajorTicks = 4)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/git_R_STATS_KBS/package/rbioplot")
devtools::document()
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
library(RBioplot)
autorange_curve("data6.csv", x_nMajorTicks = 4)
autorange_curve("data6.csv", errorbar = "SD", x_nMajorTicks = 4)
rbioplot_curve("data6.csv", errorbar = "SEM",
legendTtl = TRUE,
xLabel = "",
x_custom_tick_range = TRUE, x_upper_limit = 32,
x_major_tick_range = 8, x_n_minor_ticks = 0,
y_custom_tick_range = TRUE, y_upper_limit = 45,
y_major_tick_range = 4.5, y_n_minor_ticks = 4)
rbioplot_curve("data6.csv", errorbar = "SD",
legendTtl = TRUE,
xLabel = "",
x_custom_tick_range = TRUE, x_upper_limit = 32,
x_major_tick_range = 8, x_n_minor_ticks = 0,
y_custom_tick_range = TRUE, y_upper_limit = 45,
y_major_tick_range = 4.5, y_n_minor_ticks = 4)
setwd("~/OneDrive/Storey lab/current_work/switch_to_R/sample_data/")
rbioplot("data.csv","Tukey", errorbar = "SD", xTickLblSize = 15, yTickLblSize = 12)
